game:GetService("VirtualInputManager"):SendKeyEvent(true, "W", false, game) wait(0.01) game:GetService("VirtualInputManager"):SendKeyEvent(false, "W", false, game) wait(0.01)
-- 服务声明
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local StarterGui = game:GetService("StarterGui")
-- HTTP客户端兼容性处理
local httpRequest = (syn and syn.request) or (http and http.request) or http_request 
    or (fluxus and fluxus.request) or request
-- 本地玩家引用
local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
-- 配置参数
local CONFIG = {
    SERVER_STAY_TIME = 1,              -- 单服务器停留时间(秒)
    SERVER_FETCH_RETRY_DELAY = 10,     -- 服务器列表获取失败重试间隔(秒)
    TELEPORT_COOLDOWN = 5,             -- 传送冷却时间(秒)
    MAX_PICKUP_ATTEMPTS = 5,           -- 最大拾取次数
    MIN_PLAYERS = 5,                   -- 最低玩家数量要求
    IDEAL_PLAYER_RANGE = {5, 35},      -- 最理想玩家数量范围
    NOTIFICATION_DURATION = 5,
    SCRIPT_TIMEOUT = 120,
    FORBIDDEN_ZONE = {
        center = Vector3.new(352.884155, 13.0287256, -1353.05396),
        radius = 80
    }
}
-- 目标物品列表
local TARGET_ITEMS = { "Money Printer" }
-- 状态变量
local servers = {}
local scriptStartTime = os.time()
-- 显示通知（仅保留这一个通知逻辑）
local function showNotification(text)
    StarterGui:SetCore("SendNotification", {
        Title = "lyy",
        Text = text,
        Duration = CONFIG.NOTIFICATION_DURATION
    })
end
-- 检查脚本超时
local function checkTimeout()
    return (os.time() - scriptStartTime) >= CONFIG.SCRIPT_TIMEOUT
end
-- 获取服务器列表（带重试）
local function fetchServerListWithRetry()
    local retryCount = 0
    while true do
        local success, result = pcall(function()
            local url = string.format(
                "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Asc&limit=100", 
                game.PlaceId
            )
            local response = httpRequest({
                Url = url,
                Method = "GET",
                Timeout = 10
            })
            if not response or response.StatusCode ~= 200 then
                error("服务器列表获取失败")
            end
            local decoded = HttpService:JSONDecode(response.Body)
            local filtered = {}
            local currentJobId = game.JobId
            for _, server in ipairs(decoded.data) do
                if server.playing > CONFIG.MIN_PLAYERS 
                   and server.playing < server.maxPlayers 
                   and server.id ~= currentJobId then
                    table.insert(filtered, server)
                end
            end
            table.sort(filtered, function(a, b) return a.playing < b.playing end)
            return filtered
        end)
        if success then return result end
        retryCount += 1
        task.wait(CONFIG.SERVER_FETCH_RETRY_DELAY)
    end
end
-- 选择最佳服务器
local function selectOptimalServer()
    if #servers == 0 then return nil end
    -- 优先选择理想人数范围服务器
    for _, server in ipairs(servers) do
        if server.playing >= CONFIG.IDEAL_PLAYER_RANGE[1] 
           and server.playing <= CONFIG.IDEAL_PLAYER_RANGE[2] then
            showNotification(string.format("防人满: %d", server.playing))
            return server.id
        end
    end
    -- 选择其他符合条件的服务器
    for _, server in ipairs(servers) do
        if server.playing > CONFIG.MIN_PLAYERS then
            showNotification(string.format("当前服务器人数: %d", server.playing))
            return server.id
        end
    end
    return nil
end
-- 传送至服务器
local function teleportToServer(serverId)
    local success, err = pcall(function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, serverId, localPlayer)
    end)
    return success
end
-- 传送角色
local function teleportTo(position)
    if humanoidRootPart then
        humanoidRootPart.CFrame = position
        task.wait(0.2)
    end
end
-- 扫描目标物品
local function scanForTargetItems()
    local foundItems = {}
    for _, itemFolder in pairs(workspace.Game.Entities.ItemPickup:GetChildren()) do
        for _, item in pairs(itemFolder:GetChildren()) do
            if not (item:IsA("MeshPart") or item:IsA("Part")) then continue end
            -- 禁区检查
            local distance = (item.Position - CONFIG.FORBIDDEN_ZONE.center).Magnitude
            if distance <= CONFIG.FORBIDDEN_ZONE.radius then continue end
            -- 检查目标物品
            for _, child in pairs(item:GetChildren()) do
                if child:IsA("ProximityPrompt") then
                    for _, targetName in pairs(TARGET_ITEMS) do
                        if child.ObjectText == targetName then
                            table.insert(foundItems, {
                                item = item,
                                prompt = child,
                                name = targetName
                            })
                        end
                    end
                end
            end
        end
    end
    return foundItems
end
-- 自动拾取物品
local function autoPickItems()
    local pickupCount = 0
    local startTime = os.time()
    while task.wait(0.1) do
        -- 超时或时间到则退出
        if checkTimeout() or (os.time() - startTime) >= CONFIG.SERVER_STAY_TIME then
            return false
        end
        -- 达到最大拾取次数则退出
        if pickupCount >= CONFIG.MAX_PICKUP_ATTEMPTS then
            return false
        end
        -- 扫描并拾取物品
        local items = scanForTargetItems()
        if #items == 0 then return true end
        for _, data in ipairs(items) do
            if pickupCount >= CONFIG.MAX_PICKUP_ATTEMPTS then break end
            data.prompt.RequiresLineOfSight = false
            data.prompt.HoldDuration = 0
            teleportTo(data.item.CFrame * CFrame.new(0, 2, 0))
            fireproximityprompt(data.prompt)
            pickupCount += 1
            task.wait(0.5)
        end
    end
    return false
end
-- 主循环
local function main()
    localPlayer.CharacterAdded:Connect(function(newCharacter)
        character = newCharacter
        humanoid = newCharacter:WaitForChild("Humanoid")
        humanoidRootPart = newCharacter:WaitForChild("HumanoidRootPart")
    end)
    while true do
        local success, err = pcall(function()
            servers = fetchServerListWithRetry()
            autoPickItems() -- 执行物品拾取
            -- 选择并传送至最佳服务器
            local targetServer = selectOptimalServer()
            if targetServer and teleportToServer(targetServer) then
                task.wait(CONFIG.TELEPORT_COOLDOWN)
            else
                task.wait(CONFIG.SERVER_FETCH_RETRY_DELAY)
            end
        end)
        if not success then
            task.wait(CONFIG.SERVER_FETCH_RETRY_DELAY)
        end
    end
end
-- 启动脚本
main()
